from alembic import op
import sqlalchemy as sa

import os
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")


# revision identifiers, used by Alembic.
revision = 'ffdc0a98111c'
down_revision = None
branch_labels = None
depends_on = None

def create_table_with_schema(name, *args, **kwargs):
    if environment == "production":
        kwargs["schema"] = SCHEMA
    return sa.Table(name, *args, **kwargs)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    Templates = create_table_with_schema('Templates',
        sa.Column('template_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('template_id')
    )
    op.create_table(table=Templates)

    Users = create_table_with_schema('Users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=40), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('hashed_password', sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('username')
    )
    op.create_table(table=Users)

    Workspaces = create_table_with_schema('Workspaces',
        sa.Column('workspace_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], [f'{Users.schema}.{Users.name}.id']),
        sa.PrimaryKeyConstraint('workspace_id')
    )
    op.create_table(table=Workspaces)

    Pages = create_table_with_schema('Pages',
        sa.Column('page_id', sa.Integer(), nullable=False),
        sa.Column('workspace_id', sa.Integer(), nullable=False),
        sa.Column('template_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.ForeignKeyConstraint(['template_id'], [f'{Templates.schema}.{Templates.name}.template_id']),
        sa.ForeignKeyConstraint(['workspace_id'], [f'{Workspaces.schema}.{Workspaces.name}.workspace_id']),
        sa.PrimaryKeyConstraint('page_id')
    )
    op.create_table(table=Pages)

    Blocks = create_table_with_schema('Blocks',
        sa.Column('block_id', sa.Integer(), nullable=False),
        sa.Column('page_id', sa.Integer(), nullable=False),
        sa.Column('template_id', sa.Integer(), nullable=True),
        sa.Column('content', sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(['page_id'], [f'{Pages.schema}.{Pages.name}.page_id']),
        sa.ForeignKeyConstraint(['template_id'], [f'{Templates.schema}.{Templates.name}.template_id']),
        sa.PrimaryKeyConstraint('block_id')
    )
    op.create_table(table=Blocks)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Blocks', schema=SCHEMA if environment == "production" else None)
    op.drop_table('Pages', schema=SCHEMA if environment == "production" else None)
    op.drop_table('Workspaces', schema=SCHEMA if environment == "production" else None)
    op.drop_table('Users', schema=SCHEMA if environment == "production" else None)
    op.drop_table('Templates', schema=SCHEMA if environment == "production" else None)
    # ### end Alembic commands ###
